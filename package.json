{
	"name": "vscode-httpyac",
	"displayName": "httpYac - Rest Client",
	"license": "MIT",
	"publisher": "anweber",
	"description": "Quickly and easily send REST, SOAP, and GraphQL requests directly within Visual Studio Code",
	"version": "2.16.0",
	"homepage": "https://github.com/AnWeber/vscode-httpyac",
	"repository": {
		"type": "git",
		"url": "https://github.com/AnWeber/vscode-httpyac"
	},
	"bugs": {
		"url": "https://github.com/AnWeber/vscode-httpyac/issues"
	},
	"qna": "https://github.com/AnWeber/vscode-httpyac/discussions",
	"icon": "icon.png",
	"engines": {
		"vscode": "^1.57.0"
	},
	"categories": [
		"Other",
		"Snippets",
		"Programming Languages"
	],
	"keywords": [
		"HTTP",
		"REST",
		"GraphQL",
		"Intellij Http Client",
		"Postman",
		"Soap",
		"rest-client"
	],
	"activationEvents": [
		"onCommand:httpyac.send",
		"onCommand:httpyac.sendAll",
		"onLanguage:http"
	],
	"main": "./dist/extension.js",
	"capabilities": {
		"virtualWorkspaces": true
	},
	"contributes": {
		"languages": [
			{
				"id": "http",
				"aliases": [
					"Http",
					"HTTP"
				],
				"extensions": [
					"http",
					"rest"
				],
				"firstLine": "^\\s*(GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL)\\s+.*?$",
				"configuration": "./language-configuration.json"
			}
		],
		"snippets": [
			{
				"language": "http",
				"path": "./snippets/http.json"
			}
		],
		"grammars": [
			{
				"language": "http",
				"scopeName": "source.http",
				"path": "./syntaxes/http.tmLanguage.json"
			}
		],
		"configuration": {
			"type": "object",
			"title": "httpyac",
			"properties": {
				"httpyac.requestDefaultHeaders": {
					"type": "object",
					"default": {
						"User-Agent": "httpyac"
					},
					"scope": "resource",
					"description": "default request headers if not overwritten"
				},
				"httpyac.requestBodyInjectVariablesExtensions": {
					"type": "array",
					"scope": "resource",
					"description": "always inject variables in request body for these extensions"
				},
				"httpyac.requestGotOptions": {
					"type": "object",
					"scope": "resource",
					"description": "got options used as default"
				},
				"httpyac.cookieJarEnabled": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "is cookiejar support enabled"
				},
				"httpyac.clientCertficates": {
					"type": "object",
					"scope": "resource",
					"description": "Certificate paths for different hosts. The path can be absolute path or relative path to workspace",
					"pattern": "^(?!http(s?)://)",
					"additionalProperties": {
						"anyOf": [
							{
								"type": "object",
								"default": {},
								"description": "Certifcate paths for specific host(e.g., foo.com, bar.org:8081), port is optional",
								"properties": {
									"cert": {
										"type": "string",
										"description": "Absolute or relative path of Public x509 certificate"
									},
									"key": {
										"type": "string",
										"description": "Absolute or relative path of Private key"
									},
									"pfx": {
										"type": "string",
										"description": "Absolute or relative path of PKCS #12 certificate"
									},
									"passphrase": {
										"type": "string",
										"description": "[Optional] A string of passphrase for the private key or pfx"
									}
								},
								"dependencies": {
									"cert": [
										"key"
									],
									"key": [
										"cert"
									]
								}
							}
						]
					}
				},
				"httpyac.environmentSelectedOnStart": {
					"type": "array",
					"scope": "resource",
					"description": "list of default environment on startup"
				},
				"httpyac.environmentStoreSelectedOnStart": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "store env in setting `environmentSelectedOnStart` after change"
				},
				"httpyac.environmentPickMany": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "allow picking many environments at the same time"
				},
				"httpyac.environmentVariables": {
					"type": "object",
					"scope": "resource",
					"default": {
						"$shared": {}
					},
					"description": "environment variables (e.g {\"dev\":{\"password\": \"123456\"}, prod: {\"password\": \"secure\"}}`)"
				},
				"httpyac.dotenvEnabled": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "dotenv support is enabled"
				},
				"httpyac.dotenvDirname": {
					"type": "string",
					"scope": "resource",
					"default": "env",
					"description": "relative or absolute path to folder with dotenv files"
				},
				"httpyac.dotenvDefaultFiles": {
					"type": "array",
					"default": [
						".env"
					],
					"scope": "resource",
					"description": "default dotenv files which is active in all profiles"
				},
				"httpyac.dotenvVariableProviderEnabled": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "search for .env file next to *.http files"
				},
				"httpyac.intellijEnvEnabled": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "intellij env support is enabled"
				},
				"httpyac.intellijDirname": {
					"type": "string",
					"scope": "resource",
					"description": "relative or absolute path to folder with intellij variables files"
				},
				"httpyac.intellijVariableProviderEnabled": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "search for http-client.env.json file next to *.http files"
				},
				"httpyac.responseViewHeader": {
					"type": "array",
					"default": [
						"content-type",
						"content-length"
					],
					"scope": "resource",
					"description": "headers visible in code lens of response"
				},
				"httpyac.responseViewPrettyPrint": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "response view pretty prints content. Pretty print is only working, if editor receives focus (vscode limitation)"
				},
				"httpyac.responseViewPreserveFocus": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "response view will not take focus after receiving response"
				},
				"httpyac.responseViewLanguageMap": {
					"type": "object",
					"scope": "resource",
					"description": "mimetype to languageId map for response view"
				},
				"httpyac.responseViewColumn": {
					"type": "string",
					"enum": [
						"current",
						"beside"
					],
					"markdownEnumDescriptions": [
						"Preview in the column of current request file",
						"previewing at the side of the current active column and the side direction depends on `workbench.editor.openSideBySideDirection` setting, either right or below the current editor column"
					],
					"default": "beside",
					"scope": "resource",
					"description": "response preview column option"
				},
				"httpyac.responseViewMode": {
					"type": "string",
					"enum": [
						"preview",
						"reuse",
						"open",
						"none"
					],
					"markdownEnumDescriptions": [
						"open editor in preview mode. The value is ignored when workbench.editor.previewEnabled is disabled",
						"reuse editor with same language",
						"always open in new editor",
						"use only output console"
					],
					"default": "preview",
					"scope": "resource",
					"description": "response view mode of file"
				},
				"httpyac.responseViewContent": {
					"type": "string",
					"enum": [
						"body",
						"headers",
						"full",
						"exchange"
					],
					"markdownEnumDescriptions": [
						"only view response body",
						"view only response headers",
						"view response (statusline, header, body)",
						"view request and response"
					],
					"default": "body",
					"scope": "resource",
					"description": "content of respnse view"
				},
				"httpyac.logLevel": {
					"type": "string",
					"default": "warn",
					"scope": "resource",
					"enum": [
						"trace",
						"debug",
						"warn",
						"error",
						"info"
					],
					"description": "log level of output channel"
				},
				"httpyac.logResponseBodyLength": {
					"type": "number",
					"default": 0,
					"scope": "resource",
					"description": "length of response body in output channel requests"
				},
				"httpyac.logRequest": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "log request in output channel requests"
				},
				"httpyac.showlogRequestOutput": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "should log request output always be shown"
				},
				"httpyac.useCodeLensInNotebook": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "show codelens if httpbook is used"
				},
				"httpyac.useMethodInSendCodeLens": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "use request method in send code lens"
				},
				"httpyac.useDecorationProvider": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show border lines around request"
				},
				"httpyac.decorationActiveRegion": {
					"type": "object",
					"default": {
						"borderColor": "theme.editor.selectionBackground",
						"border": "solid",
						"borderWidth": "0 0 3px 0",
						"isWholeLine": true
					},
					"scope": "window",
					"description": "decoration for active region (colors starting with theme. use vscode color)"
				},
				"httpyac.decorationInactiveRegion": {
					"type": "object",
					"default": {
						"border": "dotted rgba(0, 0, 0, 20%)",
						"borderWidth": "0 0 2px 0",
						"isWholeLine": true
					},
					"scope": "window",
					"description": "decoration for inactive region (colors starting with theme. use vscode color)"
				},
				"httpyac.showNotificationPopup": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show information, warning and error notifiation message"
				},
				"httpyac.showCodeLensEnvironment": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show code lens for toggle environment"
				},
				"httpyac.showCodeLensResetEnvironment": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "show code lens for reset environment"
				},
				"httpyac.showCodeLensLogoutUserSession": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show code lens for 'logout usersession'"
				},
				"httpyac.showCodeLensRemoveCookies": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show code lens for 'remove cookies'"
				},
				"httpyac.showCodeLensSendAll": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show code lens for 'send all' requests"
				},
				"httpyac.showCodeLensSendSelected": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "show code lens for 'send selected' requests"
				},
				"httpyac.showCodeLensClearAll": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "show code lens for 'clear all' requests"
				},
				"httpyac.showCodeLensSend": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show code lens for 'send' requests"
				},
				"httpyac.showCodeLensSendRepeat": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "show code lens for 'send repeat' requests"
				},
				"httpyac.showCodeLensTestResult": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show code lens for Test Results"
				},
				"httpyac.showCodeLensShowResponse": {
					"type": "boolean",
					"default": true,
					"scope": "resource",
					"description": "show code lens for 'show' requests"
				},
				"httpyac.showCodeLensSaveResponse": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "show code lens for 'save' requests"
				},
				"httpyac.showCodeLensShowResponseHeaders": {
					"type": "boolean",
					"default": false,
					"scope": "resource",
					"description": "show code lens for show response headers"
				},
				"httpyac.extensionScript": {
					"type": "string",
					"scope": "window",
					"description": "absolute path to a script with extensions for HttpYac (register here own parser logic)"
				},
				"httpyac.httpRegionScript": {
					"type": "string",
					"scope": "resource",
					"description": "absolute or relative path to a script which gets executed for every http request in a file"
				}
			}
		},
		"commands": [
			{
				"command": "httpyac.new",
				"title": "Create empty http file",
				"category": "httpYac"
			},
			{
				"command": "httpyac.send",
				"title": "Send",
				"category": "httpYac",
				"icon": "$(debug-start)"
			},
			{
				"command": "httpyac.sendRepeat",
				"title": "Send (repeat)",
				"category": "httpYac"
			},
			{
				"command": "httpyac.sendall",
				"title": "Send all",
				"category": "httpYac",
				"icon": "$(run-all)"
			},
			{
				"command": "httpyac.sendSelected",
				"title": "Send selected",
				"category": "httpYac",
				"icon": "$(run-all)"
			},
			{
				"command": "httpyac.generateCode",
				"title": "Generate Code",
				"category": "httpYac"
			},
			{
				"command": "httpyac.resend",
				"title": "Resend last",
				"category": "httpYac",
				"icon": "$(redo)"
			},
			{
				"command": "httpyac.show",
				"title": "Show response",
				"category": "httpYac"
			},
			{
				"command": "httpyac.viewHeader",
				"title": "Show headers",
				"category": "httpYac"
			},
			{
				"command": "httpyac.save",
				"title": "Save response",
				"category": "httpYac"
			},
			{
				"command": "httpyac.clearall",
				"title": "Clear all responses",
				"category": "httpYac"
			},
			{
				"command": "httpyac.toggle-env",
				"title": "Toggle environment",
				"category": "httpYac",
				"icon": "$(settings-gear)"
			},
			{
				"command": "httpyac.toggle-allenv",
				"title": "Toogle environment of all files",
				"category": "httpYac"
			},
			{
				"command": "httpyac.reset",
				"title": "Reset environments",
				"category": "httpYac"
			},
			{
				"command": "httpyac.logout",
				"title": "Logout user sessions",
				"category": "httpYac"
			},
			{
				"command": "httpyac.removeCookies",
				"title": "remove cookies",
				"category": "httpYac"
			}
		],
		"menus": {
			"editor/title": [
				{
					"command": "httpyac.send",
					"when": "editorTextFocus && editorLangId == http",
					"group": "1_run@1"
				},
				{
					"command": "httpyac.sendall",
					"when": "editorLangId == http",
					"group": "1_run@1"
				},
				{
					"command": "httpyac.toggle-env",
					"when": "editorLangId == http",
					"group": "1_run@1"
				},
				{
					"command": "httpyac.clearall",
					"when": "editorLangId == http",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.toggle-allenv",
					"when": "editorLangId == http",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.logout",
					"when": "editorLangId == 'http'",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.resend",
					"when": "editorTextFocus && editorLangId == http",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.generateCode",
					"when": "editorTextFocus && editorLangId == 'http'",
					"group": "httpyac@1"
				}
			],
			"editor/context": [
				{
					"command": "httpyac.send",
					"when": "editorTextFocus && editorLangId == http",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.sendRepeat",
					"when": "editorTextFocus && editorLangId == http",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.resend",
					"when": "editorTextFocus && editorLangId == http",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.toggle-env",
					"when": "editorLangId == http",
					"group": "httpyac@1"
				},
				{
					"command": "httpyac.generateCode",
					"when": "editorTextFocus && editorLangId == 'http'",
					"group": "httpyac@1"
				}
			]
		},
		"keybindings": [
			{
				"command": "httpyac.new",
				"key": "ctrl+alt+n",
				"mac": "cmd+alt+n"
			},
			{
				"command": "httpyac.send",
				"key": "ctrl+alt+r",
				"mac": "cmd+alt+r",
				"when": "editorTextFocus && editorLangId == 'http'"
			},
			{
				"command": "httpyac.resend",
				"key": "ctrl+alt+l",
				"mac": "cmd+alt+l",
				"when": "editorTextFocus && editorLangId == 'http'"
			},
			{
				"command": "httpyac.toggle-env",
				"key": "ctrl+alt+e",
				"mac": "cmd+alt+e",
				"when": "editorTextFocus && editorLangId == 'http'"
			},
			{
				"command": "httpyac.generateCode",
				"key": "ctrl+alt+g",
				"mac": "cmd+alt+g",
				"when": "editorTextFocus && editorLangId == 'http'"
			}
		],
		"jsonValidation": [
			{
				"fileMatch": ".httpyac.json",
				"url": "./schemas/httpyac-schema.json"
			},
			{
				"fileMatch": "http-client.env.json",
				"url": "./schemas/http-client.env-schema.json"
			},
			{
				"fileMatch": "http-client.private.env.json",
				"url": "./schemas/http-client.private.env-schema.json"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "webpack --config ./webpack.config.js",
		"watch": "webpack --watch --config ./webpack.config.js",
		"lockfile-lint": "lockfile-lint --path package-lock.json --validate-https --allowed-hosts npm --validate-checksum --validate-integrity",
		"eslint": "eslint src --ext ts",
		"lint": "npm run eslint && npm run lockfile-lint",
		"prepare": "husky install"
	},
	"lint-staged": {
		"*.ts": "eslint --cache --fix"
	},
	"devDependencies": {
		"@types/lodash": "^4.14.170",
		"@types/mime-types": "^2.1.0",
		"@types/node": "^15.12.4",
		"@types/uuid": "^8.3.0",
		"@types/vscode": "^1.57.0",
		"@typescript-eslint/eslint-plugin": "^4.27.0",
		"@typescript-eslint/parser": "^4.27.0",
		"eslint": "^7.29.0",
		"eslint-plugin-node": "^11.1.0",
		"fork-ts-checker-webpack-plugin": "^6.2.12",
		"husky": "^6.0.0",
		"lint-staged": "^11.0.0",
		"lockfile-lint": "^4.6.2",
		"mkdirp": "^1.0.4",
		"thread-loader": "^3.0.4",
		"ts-loader": "^9.2.3",
		"typescript": "^4.3.4",
		"webpack": "^5.39.1",
		"webpack-cli": "^4.7.2"
	},
	"dependencies": {
		"httpsnippet": "^1.25.0",
		"httpyac": "^2.16.0",
		"lodash": "^4.17.21",
		"mime-types": "^2.1.31",
		"tmp-promise": "^3.0.2"
	}
}
