{
  "scopeName": "source.http",
  "fileTypes": ["http", "rest"],
  "keyEquivalent": "^~H",
  "name": "http",
  "patterns": [
    {
      "include": "#javascript-block"
    },
    {
      "include": "#intellij-block"
    },
    {
      "include": "#assert"
    },
    {
      "include": "#request-body"
    },
    {
      "include": "#file-import"
    },
    {
      "include": "#metadata"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#response-line"
    },
    {
      "include": "#request-line"
    }
  ],
  "repository": {
    "metadata": {
      "patterns": [
        {
          "match": "^\\s*#+\\s*(@[^\\s]*)\\s+(for)\\s+(.*)\\s+(of)\\s+(.*)\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "support.constant.http"
            },
            "3": {
              "name": "entity.name.http"
            },
            "4": {
              "name": "support.constant.http"
            },
            "5": {
              "name": "entity.name.http"
            }
          },
          "name": "comment.line.sharp.forof.http"
        },
        {
          "match": "^\\s*#+\\s*(@[^\\s]*)\\s*(for)\\s+.*\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "support.constant.http"
            },
            "3": {
              "name": "entity.name.http"
            }
          },
          "name": "comment.line.sharp.for.http"
        },
        {
          "match": "^\\s*#+\\s*(@[^\\s]*)\\s*(while)\\s+(.*)\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "support.constant.http"
            },
            "3": {
              "name": "meta.embedded.block.javascript",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          },
          "name": "comment.line.sharp.while.http"
        },
        {
          "match": "^\\s*#+\\s*(@sleep)\\s+(.*)\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "meta.embedded.block.javascript",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          },
          "name": "comment.line.sharp.sleep.http"
        },
        {
          "match": "^\\s*#+\\s+(@[^\\s]*)\\s+\\s*(slot(:)?\\s*(?<slot>[^\\s]+))?\\s*(minIdleTime(:)?\\s*(?<minIdleTime>\\d*))?\\s*(max(:)?\\s*(?<max>\\d*))?\\s*(expire(:)?\\s*(?<expire>\\d*))?\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "support.constant.http"
            },
            "3": {
              "name": "entity.name.http"
            },
            "4": {
              "name": "entity.name.type.http"
            },
            "5": {
              "name": "support.constant.http"
            },
            "6": {
              "name": "entity.name.http"
            },
            "7": {
              "name": "entity.name.type.http"
            },
            "8": {
              "name": "support.constant.http"
            },
            "9": {
              "name": "entity.name.http"
            },
            "10": {
              "name": "entity.name.type.http"
            },
            "11": {
              "name": "support.constant.http"
            },
            "12": {
              "name": "entity.name.http"
            },
            "13": {
              "name": "entity.name.type.http"
            }
          },
          "name": "comment.line.sharp.ratelimit.http"
        },
        {
          "match": "^\\s*#+\\s+(@[^\\s]*)\\s+(.*)?$",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "entity.name.http"
            }
          },
          "name": "comment.line.sharp.http"
        }
      ]
    },
    "headers": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.operator.http"
            },
            "2": {
              "name": "variable.other.http"
            },
            "3": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "match": "^\\s*(\\?|&)([^=\\s]+)=(.*)$",
          "name": "http.request.url http.request.query"
        },
        {
          "match": "(?i)^\\s*(authorization)\\s*(\\:)\\s*(.*)\\s*$",
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "string.other.http",
              "patterns": [
                {
                  "match": "(?i)(basic)\\s+(.*)(:)?(.*)",
                  "captures": {
                    "1": {
                      "name": "support.constant.http"
                    },
                    "2": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    },
                    "3": {
                      "name": "keyword.control.http"
                    },
                    "4": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "(?i)(digest)\\s+(?<user>.*)(:)?(?<password>.*)",
                  "captures": {
                    "1": {
                      "name": "support.constant.http"
                    },
                    "2": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    },
                    "3": {
                      "name": "keyword.control.http"
                    },
                    "4": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "(?<type>openid|oauth2)(\\s+(?<flow>client(_credentials)?|(authorization_)?code|device(_code)?|password|implicit|hybrid))?(\\s+(?<variablePrefix>[^\\s]*))?\\s*(token_exchange\\s+(?<tokenExchangePrefix>[^\\s]*))?",
                  "captures": {
                    "1": {
                      "name": "support.constant.http"
                    },
                    "2": {
                      "name": "keyword.control.http"
                    },
                    "3": {
                      "name": "keyword.control.http"
                    },
                    "4": {
                      "name": "keyword.control.http"
                    },
                    "5": {
                      "name": "keyword.control.http"
                    },
                    "6": {
                      "name": "keyword.control.http"
                    },
                    "7": {
                      "name": "keyword.control.http"
                    },
                    "8": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.control.http"
                    },
                    "10": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    }
                  }
                },
                {
                  "match": "(?i)(aws)\\s+(?<accessKeyId>[^\\s]*)\\s+(?<secretAccessKey>[^\\s]*)\\s*(token:\\s*(?<token>[^\\s]*))?\\s*(region:\\s*(?<region>[^\\s]*))?\\s*(service:\\s*(?<service>[^\\s]*))?",
                  "captures": {
                    "1": {
                      "name": "support.constant.http"
                    },
                    "2": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    },
                    "3": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    },
                    "4": {
                      "name": "keyword.control.http"
                    },
                    "5": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    },
                    "6": {
                      "name": "keyword.control.http"
                    },
                    "7": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    },
                    "8": {
                      "name": "keyword.control.http"
                    },
                    "9": {
                      "name": "string.other.http",
                      "patterns": [
                        {
                          "include": "#http-handlebars"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "name": "http.request.header http.request.header.authorization"
        },
        {
          "match": "(?i)^\\s*((x-)?clientcert)\\s*(\\:)\\s*(cert:\\s*(?<cert>[^\\s]*)\\s*)?(key:\\s*(?<key>[^\\s]*)\\s*)?(pfx:\\s*(?<pfx>[^\\s]*)\\s*)?(passphrase:\\s*(?<passphrase>[^\\s]*)\\s*)?\\s*$",
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "entity.name.tag.http"
            },
            "3": {
              "name": "keyword.other.http"
            },
            "4": {
              "name": "keyword.control.http"
            },
            "5": {
              "name": "string.other.http"
            },
            "6": {
              "name": "keyword.control.http"
            },
            "7": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            },
            "8": {
              "name": "keyword.control.http"
            },
            "9": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            },
            "10": {
              "name": "keyword.control.http"
            },
            "11": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "name": "http.request.header  http.request.header.authorization.clientcert"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "match": "^\\s*([!#$%&'*+\\-.^_`|~0-9A-Za-z]+)\\s*(\\:)\\s*(.*?)\\s*$",
          "name": "http.request.header"
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "match": "^\\s*(@)([^(\\s=:)]*)\\s*(:?=)\\s*(.*)$",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "entity.name.http"
            },
            "3": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "name": "http.block.variable"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "^\\s*\\/\\*.*",
          "name": "comment.block.http",
          "end": "^\\s*\\*\\/\\s*",
          "beginCaptures": {
            "0": {
              "name": "comment.block.http"
            }
          },
          "endCaptures": {
            "0": {
              "name": "comment.block.http"
            }
          }
        },
        {
          "match": "^\\s*(\\#+)\\s*(.*)$",
          "name": "comment.line.sharp.http",
          "captures": {
            "1": {
              "name": "comment.line.sharp.http"
            },
            "2": {
              "name": "entity.name.type.http"
            }
          }
        },
        {
          "match": "^\\s*\\/{2}.*$",
          "name": "comment.line.sharp.http"
        }
      ]
    },
    "request-line": {
      "beginCaptures": {
        "1": {
          "name": "keyword.other.http"
        },
        "2": {
          "name": "entity.name.http",
          "patterns": [
            {
              "include": "#http-handlebars"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#protocol"
            }
          ]
        }
      },
      "begin": "(?i)^\\s*(?:(AMQP|SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL|MKCALENDAR|ACL|SEARCH|GRAPHQL)\\s+)?\\s*(.+?)(?:\\s+(HTTP\\/\\S+))?$",
      "end": "^(?!((\\s*(\\?|&)([^=\\s]+)=(.*))|(\\s*([!#$%&'*+\\-.^_`|~0-9A-Za-z]+)\\s*(\\:)\\s*(.*?)\\s*)))",
      "name": "http.request.url",
      "patterns": [
        {
          "include": "#headers"
        }
      ]
    },
    "request-body": {
      "patterns": [
        {
          "begin": "\\s*(?=(\\[|{[^{]))",
          "name": "http.request.body http.request.body.json",
          "end": "(?i)^\\s*(?=(\\#{3,}|===|\\?{2}|\\{{2}|(AMQP|SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL|MKCALENDAR|ACL|SEARCH|GRAPHQL)\\s+.*))",
          "contentName": "meta.embedded.block.json",
          "patterns": [
            {
              "include": "source.json"
            }
          ]
        },
        {
          "begin": "^\\s*(?=<\\S)",
          "name": "http.request.body http.request.body.xml",
          "end": "(?i)^\\s*(?=(\\#{3,}|===|\\?{2}|\\{{2}|(AMQP|SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL|MKCALENDAR|ACL|SEARCH|GRAPHQL)\\s+.*))",
          "contentName": "meta.embedded.block.html",
          "patterns": [
            {
              "include": "text.html"
            }
          ]
        },
        {
          "begin": "(?i)^\\s*(?=(query|mutation|fragment))",
          "name": "http.request.body http.request.body.graphql",
          "end": "(?i)^\\s*(?=(\\#{3,}|===|\\?{2}|\\{{2}|(AMQP|SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL|MKCALENDAR|ACL|SEARCH|GRAPHQL)\\s+.*))",
          "contentName": "meta.embedded.block.graphql",
          "patterns": [
            {
              "include": "source.graphql"
            }
          ]
        },
        {
          "begin": "(?i)^\\s*(?=(query|mutation|fragment))",
          "name": "http.request.body http.request.body.graphql",
          "end": "^\\{\\s*$",
          "contentName": "meta.embedded.block.graphql",
          "patterns": [
            {
              "include": "source.graphql"
            }
          ]
        },
        {
          "match": "^\\s*(===)\\s*(wait-for-server)?.*$",
          "name": "http.request.body http.request.body.separator",
          "captures": {
            "1": {
              "name": "keyword.control.http"
            },
            "2": {
              "name": "entity.name.type.http"
            }
          }
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.http"
            },
            "2": {
              "name": "keyword.control.http"
            },
            "3": {
              "name": "support.constant.http"
            },
            "4": {
              "name": "entity.name.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "match": "^(<)(?:(@)(\\w+)?)?\\s+(.+?)\\s*$",
          "name": "http.request-body.import"
        }
      ]
    },
    "response-line": {
      "patterns": [
        {
          "beginCaptures": {
            "1": {
              "name": "http.response.statusline"
            },
            "2": {
              "patterns": [
                {
                  "include": "#protocol"
                }
              ]
            },
            "3": {
              "name": "constant.numeric.http"
            },
            "4": {
              "name": "string.other.http"
            }
          },
          "name": "http.response.block",
          "begin": "(?i)^(\\s*(HTTP\\/\\S+)\\s*([1-5][0-9][0-9])\\s*(.*))$",
          "end": "^(?!((\\s*([!#$%&'*+\\-.^_`|~0-9A-Za-z]+)\\s*(\\:)\\s*(.*?)\\s*)))",
          "patterns": [
            {
              "include": "#headers"
            }
          ]
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.http"
            },
            "2": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "entity.name.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "match": "^\\s*(>>)(!)?\\s+(.+)\\s*$",
          "name": "http.response.outputredirection"
        }
      ]
    },
    "javascript-block": {
      "begin": "(?i)^\\s*{{2}(@js\\s+)?((\\+|@)?request|streaming|response|after|responseLogging)?\\s*",
      "name": "http.block.javascript",
      "end": "\\s*}}\\s*",
      "contentName": "meta.embedded.block.javascript",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
        },
        "1": {
          "name": "entity.name.type.http"
        },
        "2": {
          "name": "entity.name.type.http"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
        }
      },
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    "intellij-block": {
      "begin": "^\\s*>\\s{1}{%?\\s*",
      "name": "http.block.javascript",
      "contentName": "meta.embedded.block.javascript",
      "end": "^\\s*%}\\s*",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
        }
      },
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    "assert": {
      "patterns": [
        {
          "name": "assert",
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "entity.name.http"
            },
            "4": {
              "name": "string.other.http"
            },
            "6": {
              "name": "keyword.other.http"
            },
            "7": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "match": "^\\s*(\\?\\?)\\s*([^\\s]*)(\\s+(.*))?\\s+((endsWith|==|===|equals|exists|isTrue|isFalse|>=|>|includes|isArray|isBoolean|isNumber|isString|<=|<|matches|!=|startsWith|md5|sha256|sha512))\\s*(.*)\\s*$"
        }
      ]
    },
    "protocol": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "constant.numeric.http"
            }
          },
          "name": "http.version",
          "match": "(HTTP)/(\\d+.\\d+)"
        }
      ]
    },
    "file-import": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "entity.name.http"
            },
            "3": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "string.other.http",
              "patterns": [
                {
                  "include": "#http-handlebars"
                }
              ]
            }
          },
          "match": "(?i)^(gql|proto)\\s+(.*)\\s*(<)\\s+(.*)\\s*$",
          "name": "http.file.gql.import"
        }
      ]
    },
    "http-handlebars": {
      "patterns": [
        {
          "match": "({{)(\\$(guid|uuid|random.uuid|random.email|isoTimestamp))(}})",
          "name": "http.handlebars.uuid meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "4": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$(random.integer|random.float|random.alphanumeric|random.alphabetic|random.hexadecimal))\\s*(\\()\\s*(.*)\\s*(,?)\\s*(.*)\\s*(\\))(}})",
          "name": "http.handlebars.uuid meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "4": {
              "name": "support.constant.http"
            },
            "5": {
              "name": "variable.parameter.http"
            },
            "6": {
              "name": "support.constant.http"
            },
            "7": {
              "name": "variable.parameter.http"
            },
            "8": {
              "name": "support.constant.http"
            },
            "9": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$timestamp)\\s*(-?\\d+)?(\\s+(y|Q|M|w|d|h|m|s|ms))?(}})",
          "name": "http.handlebars.timestamp meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "variable.parameter.http"
            },
            "5": {
              "name": "keyword.other.http"
            },
            "6": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$(localD|d)atetime)\\s(('.+'|\".+\")|(rfc1123|iso8601))(\\s(?<offset>-?\\d+)\\s(y|Q|M|w|d|h|m|s|ms))?(}})",
          "name": "http.handlebars.datetime meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "5": {
              "name": "variable.parameter.http string.http"
            },
            "6": {
              "name": "variable.parameter.http string.http"
            },
            "8": {
              "name": "variable.parameter.http"
            },
            "9": {
              "name": "keyword.other.http"
            },
            "10": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$randomInt)\\s*(-?\\d+)?\\s*(-?\\d+)?(}})",
          "name": "http.handlebars.randomint meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "variable.parameter.http"
            },
            "4": {
              "name": "variable.parameter.http"
            },
            "5": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$processEnv)\\s*(.*)?(}})",
          "name": "http.handlebars.processenv meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "variable.parameter.http string.http"
            },
            "4": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$dotEnv)\\s*(.*)?(}})",
          "name": "http.handlebars.dotenv meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "variable.parameter.http string.http"
            },
            "4": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$xpath)(:)?([^\\s]*)\\s*(.*)?(}})",
          "name": "http.handlebars.dotenv meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "keyword.other.http"
            },
            "4": {
              "name": "entity.name.http"
            },
            "5": {
              "name": "variable.parameter.http string.http"
            },
            "6": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$prompt|\\$input|\\$password)(-askonce)?\\s*([^$]*)(\\$value:)\\s*(.*)(}})",
          "name": "http.handlebars.input meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "support.constant.http"
            },
            "3": {
              "name": "support.constant.http"
            },
            "4": {
              "name": "variable.parameter.http"
            },
            "5": {
              "name": "keyword.control.http"
            },
            "6": {
              "name": "variable.parameter.http"
            },
            "7": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)(\\$pick)(-askonce)?\\s*([^$]*)(\\$value:)\\s*(.*)(}})",
          "name": "http.handlebars.pick meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.http keyword.handlebars.begin.http"
            },
            "2": {
              "name": "support.constant.http"
            },
            "3": {
              "name": "support.constant.http"
            },
            "4": {
              "name": "variable.parameter.http"
            },
            "5": {
              "name": "keyword.control.http"
            },
            "6": {
              "name": "variable.parameter.http"
            },
            "7": {
              "name": "punctuation.definition.string.end.http keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "({{)([^}}]+)(}})",
          "name": "http.handlebars.javascript meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.js keyword.handlebars.begin.http"
            },
            "2": {
              "name": "meta.embedded.block.javascript",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.string.end.js keyword.handlebars.end.http"
            }
          }
        },
        {
          "match": "(\\\\{\\\\{.+\\\\}\\\\})",
          "name": "http.handlebars.escape meta.block.handlebars.http",
          "captures": {
            "1": {
              "name": "string.other.http"
            }
          }
        }
      ]
    }
  }
}
