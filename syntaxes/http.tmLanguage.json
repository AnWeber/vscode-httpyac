{
  "scopeName": "source.http",
  "fileTypes": ["http", "rest"],
  "keyEquivalent": "^~H",
  "name": "http",
  "patterns": [
    {
      "begin": "(?i)^\\s*{{2}(@js\\s+)?((\\+|@)?request|streaming|response|after|responseLogging)?\\s*",
      "name": "http.request.body.javascript",
      "end": "\\s*}}\\s*",
      "contentName": "source.js",
      "beginCaptures": {
        "0": {
          "name": "comment.line.http"
        },
        "1": {
          "name": "entity.name.type.http"
        },
        "2": {
          "name": "entity.name.type.http"
        }
      },
      "endCaptures": {
        "0": {
          "name": "comment.line.http"
        }
      },
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    {
      "begin": "^\\s*>\\s{1}{%?\\s*",
      "name": "http.request.body.javascript",
      "contentName": "source.js",
      "end": "^\\s*%}\\s*",
      "beginCaptures": {
        "0": {
          "name": "comment.line.http"
        }
      },
      "endCaptures": {
        "0": {
          "name": "comment.line.http"
        }
      },
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    {
      "begin": "\\s*(?=(\\[|{[^{]))",
      "name": "http.request.body.json",
      "end": "(?i)^\\s*(?=(\\#{3,}|\\{{2}|\\s*(AMQP|SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL)\\s+.*))",
      "contentName": "source.json",
      "patterns": [
        {
          "include": "source.json"
        }
      ]
    },
    {
      "begin": "^\\s*(?=<\\S)",
      "name": "http.request.body.xml",
      "end": "(?i)^\\s*(?=(\\#{3,}|\\{{2}|\\s*(AMQP|SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL)\\s+.*))",
      "contentName": "source.html",
      "patterns": [
        {
          "include": "text.xml"
        }
      ]
    },
    {
      "begin": "(?i)^\\s*(?=(query|mutation|fragment))",
      "name": "http.request.body.graphql",
      "end": "(?i)^\\s*(?=(\\#{3,}|\\{{2}|\\s*(AMQP|SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL)\\s+.*))",
      "contentName": "source.graphql",
      "patterns": [
        {
          "include": "source.graphql"
        }
      ]
    },
    {
      "begin": "(?i)^\\s*(?=(query|mutation|fragment))",
      "name": "http.request.body.graphql",
      "end": "^\\{\\s*$",
      "contentName": "source.graphql",
      "patterns": [
        {
          "include": "source.graphql"
        }
      ]
    },
    {
      "captures": {
        "1": {
          "name": "keyword.operator.http"
        },
        "2": {
          "name": "variable.other.http"
        },
        "3": {
          "name": "string.other.http"
        }
      },
      "match": "^\\s*(\\?|&)([^=\\s]+)=(.*)$",
      "name": "http.query"
    },
    {
      "captures": {
        "1": {
          "name": "entity.name.tag.http"
        },
        "2": {
          "name": "entity.name.http"
        },
        "3": {
          "name": "keyword.control.http"
        },
        "4": {
          "name": "string.other.http"
        }
      },
      "match": "(?i)^(gql|proto)\\s+(.*)\\s*(<)\\s+(.*)\\s*$",
      "name": "http.import"
    },
    {
      "include": "#headers"
    },
    {
      "include": "#metadata"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#response-line"
    },
    {
      "include": "#request-line"
    }
  ],
  "repository": {
    "metadata": {
      "patterns": [
        {
          "match": "^\\s*#+\\s+(@[^\\s]*)\\s+\\s*(for)\\s+(.*)\\s+(of)\\s+(.*)\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.name.http"
            },
            "2": {
              "name": "keyword.control.http"
            },
            "3": {
              "name": "entity.name.type.http"
            },
            "4": {
              "name": "keyword.control.http"
            },
            "5": {
              "name": "entity.name.type.http"
            }
          },
          "name": "comment.line.sharp.forof.http"
        },
        {
          "match": "^\\s*#+\\s+(@[^\\s]*)\\s+\\s*(for)\\s+.*\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.name.http"
            },
            "2": {
              "name": "keyword.control.http"
            },
            "3": {
              "name": "entity.name.type.http"
            }
          },
          "name": "comment.line.sharp.for.http"
        },
        {
          "match": "^\\s*#+\\s+(@[^\\s]*)\\s+\\s*(while)\\s+(.*)\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.name.http"
            },
            "2": {
              "name": "keyword.control.http"
            },
            "3": {
              "name": "entity.name.type.http"
            }
          },
          "name": "comment.line.sharp.while.http"
        },
        {
          "match": "^\\s*#+\\s+(@[^\\s]*)\\s+\\s*(slot(:)?\\s*(?<slot>[^\\s]+))?\\s*(minIdleTime(:)?\\s*(?<minIdleTime>\\d*))?\\s*(max(:)?\\s*(?<max>\\d*))?\\s*(expire(:)?\\s*(?<expire>\\d*))?\\s*?$",
          "captures": {
            "1": {
              "name": "keyword.name.http"
            },
            "2": {
              "name": "keyword.control.http"
            },
            "3": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "entity.name.type.http"
            },
            "5": {
              "name": "keyword.control.http"
            },
            "6": {
              "name": "keyword.control.http"
            },
            "7": {
              "name": "entity.name.type.http"
            },
            "8": {
              "name": "keyword.control.http"
            },
            "9": {
              "name": "keyword.control.http"
            },
            "10": {
              "name": "entity.name.type.http"
            },
            "11": {
              "name": "keyword.control.http"
            },
            "12": {
              "name": "keyword.control.http"
            },
            "13": {
              "name": "entity.name.type.http"
            }
          },
          "name": "comment.line.sharp.ratelimit.http"
        },
        {
          "match": "^\\s*#+\\s+(@[^\\s]*)\\s+(.*)?$",
          "captures": {
            "1": {
              "name": "keyword.name.http"
            },
            "2": {
              "name": "entity.name.type.http"
            }
          },
          "name": "comment.line.sharp.http"
        }
      ]
    },
    "headers": {
      "patterns": [
        {
          "match": "(?i)^\\s*(authorization)\\s*(\\:)\\s*(basic)\\s+(?<user>.*)(:)?(?<password>.*)\\s*$",
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "string.other.http"
            },
            "5": {
              "name": "keyword.control.http"
            },
            "6": {
              "name": "string.other.http"
            }
          },
          "name": "http.authorization.basic.headers"
        },
        {
          "match": "(?i)^\\s*(authorization)\\s*(\\:)\\s*(digest)\\s+(?<user>.*)(:)?(?<password>.*)\\s*$",
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "string.other.http"
            },
            "5": {
              "name": "keyword.control.http"
            },
            "6": {
              "name": "string.other.http"
            }
          },
          "name": "http.authorization.digest.headers"
        },
        {
          "match": "(?i)^\\s*(authorization)\\s*(\\:)\\s*(aws)\\s+(?<accessKeyId>[^\\s]*)\\s+(?<secretAccessKey>[^\\s]*)\\s*(token:\\s*(?<token>[^\\s]*))?\\s*(region:\\s*(?<region>[^\\s]*))?\\s*(service:\\s*(?<service>[^\\s]*))?\\s*$",
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "string.other.http"
            },
            "5": {
              "name": "string.other.http"
            },
            "6": {
              "name": "keyword.control.http"
            },
            "7": {
              "name": "string.other.http"
            },
            "8": {
              "name": "keyword.control.http"
            },
            "9": {
              "name": "string.other.http"
            },
            "10": {
              "name": "keyword.control.http"
            },
            "11": {
              "name": "string.other.http"
            }
          },
          "name": "http.authorization.aws.headers"
        },
        {
          "match": "(?i)^\\s*((x-)?clientcert)\\s*(\\:)\\s*(cert:\\s*(?<cert>[^\\s]*)\\s*)?(key:\\s*(?<key>[^\\s]*)\\s*)?(pfx:\\s*(?<pfx>[^\\s]*)\\s*)?(passphrase:\\s*(?<passphrase>[^\\s]*)\\s*)?\\s*$",
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "entity.name.tag.http"
            },
            "3": {
              "name": "keyword.other.http"
            },
            "4": {
              "name": "keyword.control.http"
            },
            "5": {
              "name": "string.other.http"
            },
            "6": {
              "name": "keyword.control.http"
            },
            "7": {
              "name": "string.other.http"
            },
            "8": {
              "name": "keyword.control.http"
            },
            "9": {
              "name": "string.other.http"
            },
            "10": {
              "name": "keyword.control.http"
            },
            "11": {
              "name": "string.other.http"
            }
          },
          "name": "http.authorization.clientcert.headers"
        },
        {
          "match": "(?i)^\\s*(authorization)\\s*(\\:)\\s*(?<type>openid|oauth2)(\\s+(?<flow>client(_credentials)?|(authorization_)?code|device(_code)?|password|implicit|hybrid))?(\\s+(?<variablePrefix>[^\\s]*))?\\s*(token_exchange\\s+(?<tokenExchangePrefix>[^\\s]*))?\\s*$",
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "keyword.control.http"
            },
            "4": {
              "name": "keyword.control.http"
            },
            "5": {
              "name": "keyword.control.http"
            },
            "6": {
              "name": "keyword.control.http"
            },
            "7": {
              "name": "keyword.control.http"
            },
            "8": {
              "name": "keyword.control.http"
            },
            "9": {
              "name": "keyword.control.http"
            },
            "10": {
              "name": "string.other.http"
            },
            "11": {
              "name": "keyword.control.http"
            },
            "12": {
              "name": "string.other.http"
            }
          },
          "name": "http.authorization.oauth2.headers"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.tag.http"
            },
            "2": {
              "name": "keyword.other.http"
            },
            "3": {
              "name": "string.other.http"
            }
          },
          "match": "^\\s*([!#$%&'*+\\-.^_`|~0-9A-Za-z]+)\\s*(\\:)\\s*(.*?)\\s*$",
          "name": "http.headers"
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "match": "^\\s*(@[^(\\s=)]*)(?:(\\s*=\\s*)|(\\s+))(?<value>.*)$",
          "captures": {
            "1": {
              "name": "keyword.name.http"
            },
            "2": {
              "name": "string.other.http"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "^\\s*\\/\\*.*",
          "name": "comment.block.http",
          "end": "^\\s*\\*\\/\\s*",
          "beginCaptures": {
            "0": {
              "name": "comment.block.http"
            }
          },
          "endCaptures": {
            "0": {
              "name": "comment.block.http"
            }
          }
        },
        {
          "match": "^\\s*(\\#+)\\s*(.*)$",
          "name": "comment.line.sharp.http",
          "captures": {
            "1": {
              "name": "comment.line.sharp.http"
            },
            "2": {
              "name": "entity.name.type.http"
            }
          }
        },
        {
          "match": "^\\s*\\/{2}.*$",
          "name": "comment.line.sharp.http"
        }
      ]
    },
    "request-line": {
      "captures": {
        "1": {
          "name": "keyword.control.http"
        },
        "2": {
          "name": "const.language.http"
        },
        "3": {
          "patterns": [
            {
              "include": "#protocol"
            }
          ]
        }
      },
      "match": "(?i)^\\s*(?:(SSE|EVENTSOURCE|WSS|WS|WEBSOCKET|GRPC|GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|CONNECT|TRACE|PROPFIND|PROPPATCH|MKCOL|COPY|MOVE|LOCK|UNLOCK|CHECKOUT|CHECKIN|REPORT|MERGE|MKACTIVITY|MKWORKSPACE|VERSION-CONTROL|BASELINE-CONTROL)\\s+)?\\s*(.+?)(?:\\s+(HTTP\\/\\S+))?$",
      "name": "http.requestline"
    },
    "response-line": {
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#protocol"
            }
          ]
        },
        "2": {
          "name": "constant.numeric.http"
        },
        "3": {
          "name": "string.other.http"
        }
      },
      "match": "(?i)^\\s*(HTTP\\/\\S+)\\s*([1-5][0-9][0-9])\\s*(.*)$",
      "name": "http.responseLine"
    },
    "protocol": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.other.http"
            },
            "2": {
              "name": "constant.numeric.http"
            }
          },
          "name": "http.version",
          "match": "(HTTP)/(\\d+.\\d+)"
        }
      ]
    }
  }
}
